#! /usr/bin/make -f

# Boost libraries for which we want separate packages
# context is conditionally compiled because it is not supported yet on several architectures
# coroutine, coroutine2, and fiber depend on context, so they are also conditionally compiled
boost_libs := atomic chrono date-time exception filesystem		\
              graph graph-parallel iostreams locale log math mpi	\
              mpi-python program-options python random regex		\
              serialization signals system test thread timer 		\
              type-erasure wave

# these are special cases, where /usr/lib name differs from Boost library name
boost_lib_log := log log_setup
boost_lib_math := math_c99 math_c99f math_tr1 math_tr1f
boost_lib_math_long_double := math_c99l math_tr1l
boost_lib_serialization := serialization wserialization
boost_lib_test := prg_exec_monitor test_exec_monitor unit_test_framework

pyversions = $(shell pyversions -rv) $(shell py3versions -rv)

# These are special cases for suffixes.  Generally come from --python-buildid, so begin with a dash.
boost_suffixes_python := $(addprefix -py,$(subst .,,$(pyversions)))
boost_suffixes_mpi-python := $(boost_suffixes_python)

# Files that are generated by filtering a template
filtered_files = 

DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk
include /usr/share/dpkg/architecture.mk

%:
	dh $@ --with python2 --with python3

override_dh_auto_configure: user-config.jam make-debhelper

override_dh_auto_build: $(bjam) debian/bjam.1
	$(JAM) $(JAM_WITHOUT) --without-python
	for pyver in $(pyversions); do \
	 	pyid=$$(echo $$pyver | tr -d .); \
		echo "Building Boost.Python for python version $$pyver"; \
	 	$(JAM) --build-dir=build-$$pyver --user-config=$(CURDIR)/user-config-$$pyver.jam --with-python --with-mpi --python-buildid=py$$pyid python=$$pyver; \
	 	mv stage/lib/mpi.so stage/lib/mpi-py$$pyid.so || true; \
	done

	cd $(bbv2dir) && ./bootstrap.sh --with-toolset=gcc
	cd tools/bcp && $(JAM)
	cd tools/inspect/build && $(JAM)
	cd tools/quickbook && $(JAM)

testsuite:
	cd status && $(JAM) $(JAM_WITHOUT)

override_dh_auto_clean: clean-debhelper
	-cd tools && $(JAM) clean
	-$(JAM) clean
	rm -rf tools/jam/src/bootstrap
	rm -rf tools/jam/src/bin.*
	rm -ff tools/jam/src/bjam
	rm -rf tools/regression/build/bin
	rm -rf bin.v2 dist
	rm -rf user-config.jam
	rm -rf build-* user-config-*.jam
	rm -rf debian/bjam.1
	dh_auto_clean

override_dh_compress:
	dh_compress -Xlibboost$(PKGVERSION)-doc/HTML

override_dh_install:
	$(JAM) --prefix=$(CURDIR)/debian/tmp/opt/scylladb $(JAM_WITHOUT) \
		--libdir=$(CURDIR)/debian/tmp/opt/scylladb/lib/$(DEB_HOST_MULTIARCH) \
		--without-python install
	for pyver in $(pyversions); do \
		pyid=`echo $$pyver | tr -d .`; \
		$(JAM) --build-dir=build-$$pyver --user-config=$(CURDIR)/user-config-$$pyver.jam --prefix=$(CURDIR)/debian/tmp/opt/scylladb \
			--libdir=$(CURDIR)/debian/tmp/opt/scylladb/lib/$(DEB_HOST_MULTIARCH) \
			install --with-python --with-mpi --python-buildid=py$$pyid python=$$pyver; \
	done

	# Install Boost.Build v2 & jam
	cd $(bbv2dir) && ./bjam install --prefix=$(CURDIR)/debian/tmp/opt/scylladb --libdir=$(CURDIR)/debian/tmp/opt/scylladb/lib/$(DEB_HOST_MULTIARCH)
	mv debian/tmp/opt/scylladb/share/boost-build/example debian/boost-build-examples

	find debian/tmp/opt/scylladb/include debian/tmp/opt/scylladb/share/boost-build -type f | xargs chmod 644
	find debian/tmp -name .cvsignore | xargs rm -f
	find debian -empty -type f | xargs rm -f

	# package libboost$(PKGVERSION)-dev
	dh_install -plibboost$(PKGVERSION)-dev \
	   debian/tmp/opt/scylladb/include/boost \
	   usr/include
	dh_install -plibboost$(PKGVERSION)-tools-dev \
	   debian/tmp/opt/scylladb/bin/bjam \
	   dist/bin/bcp \
	   dist/bin/inspect \
	   dist/bin/quickbook \
	   usr/bin
	dh_link -plibboost$(PKGVERSION)-tools-dev opt/scylladb/bin/bjam opt/scylladb/bin/b2
	dh_installman -plibboost$(PKGVERSION)-tools-dev debian/bjam.1 debian/bcp.1 debian/inspect.1 debian/quickbook.1
	dh_install -plibboost$(PKGVERSION)-tools-dev tools/boostbook/xsl/* opt/scylladb/share/boostbook/xsl
	dh_install -plibboost$(PKGVERSION)-tools-dev tools/boostbook/dtd/* opt/scylladb/share/boostbook/dtd
	dh_install -plibboost$(PKGVERSION)-tools-dev debian/tmp/opt/scylladb/share/boost-build

	# package libboost-date-time$(PKGVERSION)-dev
	dh_installdocs -plibboost-date-time$(PKGVERSION)-dev libs/date_time/data

	# package libboost-doc
	rm -rf $(htmldir)
	mkdir -p $(htmldir) 
	#cat debian/documentation-files | xargs cp --parents --target-directory=$(htmldir)
	#find doc libs -name doc | xargs -n1 cp --archive --parents --target-directory=$(htmldir)
	rm -rf $(htmldir)/boost
	dh_link -plibboost$(PKGVERSION)-doc \
	   opt/scylladb/include/boost \
	   opt/scylladb/share/doc/libboost$(PKGVERSION)-doc/HTML/boost
	# provide a constant symlink to the latest documents and examples
	dh_link -plibboost$(PKGVERSION)-doc \
	   opt/scylladb/share/doc/libboost$(PKGVERSION)-doc/HTML \
	   opt/scylladb/share/doc/libboost-doc/HTML
	dh_link -plibboost$(PKGVERSION)-doc \
	   opt/scylladb/share/doc/libboost$(PKGVERSION)-doc/examples \
	   opt/scylladb/share/doc/libboost-doc/examples

	dh_link -plibboost-python$(PKGVERSION)-dev \
	   opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_python-py27.a \
	   opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_python.a
	dh_link -plibboost-python$(PKGVERSION)-dev \
	   opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_python-py27.so \
	   opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_python.so

	dh_link -plibboost-mpi-python$(PKGVERSION)-dev \
	   opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_mpi_python-py27.a \
	   opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_mpi_python.a
	dh_link -plibboost-mpi-python$(PKGVERSION)-dev \
	   opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_mpi_python-py27.so \
	   opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_mpi_python.so

	dh_installexamples -plibboost$(PKGVERSION)-doc debian/boost-build-examples
	mkdir -p $(exampledir)
	cat debian/example-files | xargs cp -a --parents --target-directory=$(exampledir)
	find $(exampledir) -type f | xargs chmod 644

	# package libboost-mpi-python$(SOVERSION)
	dh_install -plibboost-mpi-python$(SOVERSION)
	for pyver in $(pyversions); do \
		pyid=`echo $$pyver | tr -d .`; \
		case $$pyver in \
			2.*) pydistdir=usr/lib/python$$pyver/dist-packages/boost ;; \
			3.*) pydistdir=usr/lib/python3/dist-packages/boost ;; \
		esac; \
		dh_install -plibboost-mpi-python$(SOVERSION) libs/mpi/build/__init__.py $$pydistdir; \
		dh_installdirs -plibboost-mpi-python$(SOVERSION) $$pydistdir; \
		cp stage/lib/mpi-py$$pyid.so debian/libboost-mpi-python$(SOVERSION)/$$pydistdir/mpi.so || true; \
	done

	find debian -iname '*.so*' -type f -print0 | xargs -0 chrpath --delete
	dh_install --list-missing

override_dh_strip:
	dh_strip --dbgsym-migration='libboost1.55-dbg, libboost1.58-dbg, libboost1.61-dbg'

# set the number of build jobs
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
  JOBS := -j$(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

version_full := $(shell dpkg-parsechangelog | grep Version | cut -d' ' -f2)
version_upstream := $(shell echo $(version_full) | cut -d'+' -f1)
version_major := $(shell echo $(version_upstream) | cut -d'.' -f1,2)

PKGVERSION = $(version_major)
SOVERSION = $(version_upstream)


# Function to map Boost component name to set of shared library names
# Input: Boost component name
# Return: shared library names for the given Boost library
boost_lib = $(if $(boost_lib_$(1)), $(boost_lib_$(1)), $(1))

# Function to map Boost component name to set of suffixes for the library
# Input: Boost component name
# Return: suffixes for the given Boost component
boost_suffixes = $(if $(boost_suffixes_$(1)), $(boost_suffixes_$(1)),"")

# Helpers to make basic and decorated library names
# Input: library, suffix
# Return: base library filename for short or full name
mk_base_name = opt/scylladb/lib/$(DEB_HOST_MULTIARCH)/libboost_$(subst -,_,$(1))$(2)

# Input: component
# Return: package name for shared library or development
mk_pkg_lib = libboost-$(1)$(SOVERSION)
mk_pkg_dev = libboost-$(1)$(PKGVERSION)-dev

# Helpers to generate debhelper input filenames.
# Input: component
# Return: prefix to debhelper filenames
mk_deb_lib = debian/$(call mk_pkg_lib,$(1))
mk_deb_dev = debian/$(call mk_pkg_dev,$(1))

# Helpers that update debhelper .install or .links files
# Input: component, library, suffix
# Output: none
mk_so_files = $(shell echo debian/tmp/$(call mk_base_name,$(2),$(3)).so.$(SOVERSION) >> $(call mk_deb_lib,$(1)).install)
mk_a_files = $(shell echo debian/tmp/$(call mk_base_name,$(2),$(3)).a >> $(call mk_deb_dev,$(1)).install)
mk_ln_files = $(shell echo $(call mk_base_name,$(2),$(3)).so.$(SOVERSION) $(call mk_base_name,$(2),$(3)).so >> $(call mk_deb_dev,$(1)).links)

# Specify the type of files/links to install.
# Special cases first, then general rule
boost_filetypes_exception = a
boost_filetypes_test_exec_monitor = a
boost_filetypes = $(if $(boost_filetypes_$(1)), $(boost_filetypes_$(1)),a so ln)

# Function that updates debhelper files for a given library
# Input: component, library, suffix
# Output: none
mk_files = $(foreach fn,$(call boost_filetypes,$(2)),$(call mk_$(fn)_files,$(1),$(2),$(3)))

# helpers to make and install lintian override files

# Input: package, override
add_override = echo $(1): $(2) >> debian/$(1).lintian-overrides;

# Input: override
add_dev_override = $(call add_override,libboost$(PKGVERSION)-dev,$(1))
add_doc_override = $(call add_override,libboost$(PKGVERSION)-doc,$(1))

# Input: component, lintian-warning
add_lib_override = $(call add_override,$(call mk_pkg_lib,$(1)),$(2))
add_libdev_override = $(call add_override,$(call mk_pkg_dev,$(1)),$(2))

# Input: package-name-base, versioned-package-name
cp_debhelper = for s in doc-base examples postinst prerm README.Debian; do \
	if test -f debian/$(1).$$s; then cp -f debian/$(1).$$s debian/$(2).$$s; fi; done

# Function that updates debhelper files for all libraries shipped.
mk_debhelper_files = \
	$(call add_dev_override,extra-license-file) \
	$(call add_doc_override,extra-license-file) \
	$(foreach l, $(boost_libs), \
		echo "making debhelper files for $(l)..."; \
		$(call add_lib_override,$(l),package-name-doesnt-match-sonames) \
		$(foreach ll, $(call boost_lib,$(l)), \
			$(foreach suf, $(call boost_suffixes,$(l)), \
				$(call mk_files,$(l),$(ll),$(suf)) \
			) \
		) \
	)

TOOLSET_CONFIG = 'using gcc : : $(DEB_HOST_GNU_TYPE)-g++-7 : <compileflags>"$(CPPFLAGS)" <cflags>"$(CFLAGS)" <cxxflags>"$(CXXFLAGS) -Wno-unused-local-typedefs" <linkflags>"$(LDFLAGS)" ;'
BUILD_CONTEXT = yes
BUILD_LONG_DOUBLE = yes

DEB_BUILD_ARCH ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)

ifeq ($(DEB_BUILD_ARCH), alpha)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), arm)
BUILD_LONG_DOUBLE = no
else ifeq ($(DEB_BUILD_ARCH), armel)
BUILD_LONG_DOUBLE = no
else ifeq ($(DEB_BUILD_ARCH), armhf)
BUILD_LONG_DOUBLE = no
else ifeq ($(DEB_BUILD_ARCH), arm64)
BUILD_LONG_DOUBLE = no
JAM_OPT += pch=off
else ifeq ($(DEB_BUILD_ARCH), hppa)
BUILD_LONG_DOUBLE = no
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), ia64)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), m68k)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), mips)
BUILD_LONG_DOUBLE = no
else ifeq ($(DEB_BUILD_ARCH), mipsel)
BUILD_LONG_DOUBLE = no
else ifeq ($(DEB_BUILD_ARCH), mips64)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), mips64el)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), powerpcspe)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), ppc64)
BUILD_CONTEXT = yes
else ifeq ($(DEB_BUILD_ARCH), ppc64el)
BUILD_CONTEXT = yes
else ifeq ($(DEB_BUILD_ARCH), s390)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), s390x)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), sh4)
BUILD_LONG_DOUBLE = no
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), sparc)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), sparc64)
BUILD_CONTEXT = no
else ifeq ($(DEB_BUILD_ARCH), x32)
BUILD_CONTEXT = no
endif

ifeq ($(BUILD_CONTEXT), yes)
boost_libs += context coroutine fiber
else
JAM_WITHOUT += --without-context --without-coroutine --without-coroutine2 --without-fiber
endif

ifeq ($(BUILD_LONG_DOUBLE), yes)
boost_lib_math += $(boost_lib_math_long_double)
else
JAM_OPT += --disable-long-double
endif

exampledir = debian/libboost$(PKGVERSION)-doc/opt/scylladb/share/doc/libboost$(PKGVERSION)-doc/examples
htmldir = debian/libboost$(PKGVERSION)-doc/opt/scylladb/share/doc/libboost$(PKGVERSION)-doc/HTML
bjam = $(CURDIR)/bjam
bbv2dir = $(CURDIR)/tools/build

# With --ignore-site-config, can probably drop Build-Conflicts on boost-build.
JAM = $(bjam) $(JOBS) -d2 $(JAM_OPT) --layout=system --ignore-site-config --user-config=$(CURDIR)/user-config.jam debug-symbols=on




$(bjam):
	./bootstrap.sh --with-icu=/usr --prefix=$(CURDIR)/debian/tmp/opt/scylladb \
		--libdir=$(CURDIR)/debian/tmp/opt/scylladb/lib/$(DEB_HOST_MULTIARCH) \
	  || cat bootstrap.log

debian/bjam.1: $(bjam)
	help2man --name 'software build tool' --no-info ./bjam > $@

user-config.jam:
	echo $(TOOLSET_CONFIG) > $@
	echo "using mpi ;"     >> $@
	for pyver in $(pyversions); do \
		cp $@ user-config-$$pyver.jam; \
		echo "using python : $$pyver : /usr ;" >> user-config-$$pyver.jam; \
	done

$(filtered_files): % : %.in
	sed -e 's/@PKGVERSION@/$(PKGVERSION)/g' < $< > $@

clean-debhelper:
	rm -rf debian/*.install
	rm -rf debian/*.links
	rm -rf debian/*.lintian-overrides

# Make all the generated debhelper files.
make-debhelper: clean-debhelper $(filtered_files)
	@$(call mk_debhelper_files)
	@$(call cp_debhelper,libboost-dev,libboost$(PKGVERSION)-dev)
	@$(call cp_debhelper,libboost-doc,libboost$(PKGVERSION)-doc)
	@$(call cp_debhelper,libboost-python-dev,libboost-python$(PKGVERSION)-dev)
	@$(call cp_debhelper,libboost-mpi-python-dev,libboost-mpi-python$(PKGVERSION)-dev)

